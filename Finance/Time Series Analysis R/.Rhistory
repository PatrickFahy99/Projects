print(num)
num +=1
if (num >= 5) {
break
}
}
num = 1
repeat {
print(num)
num = num + 1
if (num >= 5) {
break
}
}
num = 1
repeat {
print(num)
num +=1
if (num >= 5) {
break
}
}
num = 1
while (num > 0) {
num = num - 1
if (num %% 2 == 0) {
next
}
print(i)
}
num = 1
while (num > 0) {
num = num - 1
if (num %% 2 == 0) {
next
}
print(num)
}
num = 1
while(num > 0) {
num = num - 1
if (num %% 2 == 0) {
next
}
print(num)
}
num = 5
while (num > 0) {
num = num - 1
if (num %% 2 == 0) {
next
}
print(num)
}
for (i in 1:5){
print(i)
}
matrix = matrix(data=c(1,2,3,4,5,6), nrow=3)
matrix = matrix(data=c(1,2,3,4,5,6), nrow=3, ncol=3)
matrix = matrix(data=c(1,2,3,4,5,6), nrow=3, ncol=2)
matrix1 = matrix(data=c(1,2,3,4,5,6), nrow=3, ncol=2)
matrix
matrix = matrix(data=c(1,2,3,4,5,6))
matrix
matrix = matrix(data=c(1,2,3,4,5,6), nrow=3)
matrix
matrix = matrix(data=c(1,2,3,4,5,6), ncol=3)
matrix
matrix = matrix(data=c(1,2,3,4,5,6), nrow=3)
matrix
matrix2 = matrix(data=c(1,2,3,4,5,6), nrow=3, byrow=T)
matrix2
matrix2 = matrix(data=c(1,2,3,4,5,6), nrow=3, byrow=F)
matrix2
matrix2 = matrix(data=c(1,2,3,4,5,6), nrow=3, byrow=T)
matrix2
dim(matrix1)
matrix1[,1]
matrix3 = rbind(1:3,4:6,7:9)
matrix3
matrix3[-1,]
matrix3[,-1]
matrix3[-1,]
array1 = array(data=1:8, dim=c(2,2,2))
array1
getSum = function(x,y) {
return x+y
}
getSum(3,5)
getSum = function(x,y) {
return x+y
}
getSum = function(x,y) {
return (x+y()
}
getSum(3,5)
getSum = function(x,y) {
return (x+y)
}
getSum(3,5)
getSum = function(x,y) {
return x+y
}
getSum = function(x,y) {
return (x+y)
}
getSum(3,5)
getSum = function(x=1,y=2) {
return (x+y)
}
getSum
getSum
getSum = function(x,y) {
return (x+y)
}
getSum(3,5)
makeList = function(theString) {
strsplit(theString, " ")
}
makeList("Random Words")
makeList = function(theString) {
strsplit(theString, "")
}
makeList("Random Words")
makeList = function(theString) {
strsplit(theString, " ")
}
makeList("Random Words")
missingFunc = function(x) {
if (missing(x)) {
return("Please input argument!")
} else {
return(x)
}
}
missingFunc
missingFunc = function(x) {
if (missing(x)) {
return("Please input argument!")
} else {
return(x)
}
}
missingFunc()
missingFunc(3)
numList = 1:10
doubleList = (function(x) x*2)(numList)
doubleList
power = function(exp) {
function(x) {
x^exp
}
}
cubed = power(3)
cubed(2)
divide = function(x,y) {
tryCatch(
x/y,
error = function(e) {
if (is.character(x) || is.character(y)) {
print("Can't divide with strings")
}
}
)
}
divide(10,"5")
divide = function(x,y) {
tryCatch(
x/y,
error = function() {
if (is.character(x) || is.character(y)) {
print("Can't divide with strings")
}
}
)
}
divide(10,"5")
divide = function(x,y) {
tryCatch(
x/y,
error = function(x,y) {
if (is.character(x) || is.character(y)) {
print("Can't divide with strings")
}
}
)
}
divide(10,"5")
divide = function(x,y) {
tryCatch(
x/y,
error = function(a) {
if (is.character(x) || is.character(y)) {
print("Can't divide with strings")
}
}
)
}
divide(10,"5")
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople
myPeople
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
na.strings="'",
stringsAsFactors=F)
myPeople
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
dec="'",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T,
sep=" ",
dec=";",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T, sep=" "
na.strings=";",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T, sep=" "
na.strings=";",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T, sep=" ",
na.strings=";",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T, sep=" ",
na.strings=";",
stringsAsFactors=F)
myPeople = read.table(file=file.choose(),
header=T, sep=" ",
na.strings=";",
stringsAsFactors=F)
myPeople
johnRecord = data.frame(fname = "John",
sname = "Fahy",
sex="male")
myPeople = rbind(myPeople,johnRecord)
myPeople = rbind(myPeople,johnRecord)
myPeople
johnRecord = data.frame(fname = "John",
lname = "Fahy",
sex="male")
myPeople = rbind(myPeople,johnRecord)
myPeople
myPeople[3,2] = "Smith"
write.table(x=myPeople, file=file.choose(),
sep=" ", na=";", quote=F, row.names=F)
head.myPeople
head(myPeople)
head(myPeople,2)
tail(myPeople,2)
xy1 = matrix(data=c(1,2,3,4,5,
1,2,3,4,5), nrow=5,ncol=5)
plot(xy1)
x2=c(1,2,3,4,5)
y2=c(1,2,3,4,5)
plot(x2,y2,type="l")
plot(x2,y2,type="l", main="Plot",xlab="x",ylab="y")
plot(x2,y2,type="l", main="Plot",xlab="x",ylab="y",col="blue")
plot(x2,y2,type="l", main="Plot",xlab="x",ylab="y",col="blue", xlim=c(0,5))
abline(h=c(2,4),lty=2)
segments(x0=c(1,1), x1=c(2,1), y0=c(2,1), y1=c(4,2))
segments(x0=c(1,1), x1=c(1,1), y0=c(2,1), y1=c(4,2), lty=2)
segments(x0=c(1,1), x1=c(1,1), y0=c(2,1), y1=c(4,2), lty=2)
segments(x0=c(2,4), x1=c(2,4), y0=c(2,2), y1=c(4,4), lty=2)
x2=c(1,2,3,4,5)
y2=c(1,2,3,4,5)
plot(x2,y2,type="l", main="Plot",xlab="x",ylab="y",col="blue", xlim=c(0,5))
# Different types are: b, o,
abline(h=c(2,4),lty=2)
# lty=2 makes it dashed
segments(x0=c(2,4), x1=c(2,4), y0=c(2,2), y1=c(4,4), lty=2)
arrows(x0=1.5,x1=4,y0=1.5,y1=5,col="red")
text(x=1.25, y=1.5,labels="arrow")
text(x=1.15, y=1.5,labels="arrow")
x2=c(1,2,3,4,5)
y2=c(1,2,3,4,5)
plot(x2,y2,type="l", main="Plot",xlab="x",ylab="y",col="blue", xlim=c(0,5))
# Different types are: b, o,
abline(h=c(2,4),lty=2)
# lty=2 makes it dashed
segments(x0=c(2,4), x1=c(2,4), y0=c(2,2), y1=c(4,4), lty=2)
arrows(x0=1.5,x1=4,y0=1.5,y1=5,col="red")
text(x=1.15, y=1.5,labels="arrow")
plot(faithful)
eruptions4=with(faithful,faithful[eruptions>4])
eruptions4=with(faithful,faithful[eruptions>4,])
points(eruptions4, col="red")
sqrt(100)
log(4,2)
log(x=4,y=2) # log of 4 with base 2 (can write x=4 base=2)
log(x=4,base=2) # log of 4 with base 2 (can write x=4 base=2)
log(y=4,base=2) # log of 4 with base 2 (can write x=4 base=2)
sum(c(1,4,5))
mean(1,5,6,23,7)
mean(1,5,6,23,7)
mean(c(1,5,6,23,7)
mean(c(1,5,6,23,7))
mean(c(1,5,6,23,7))
c(1,5,6,23,7)
mean(c(1,5,6,23,7))
mean(list)
list = c(1,5,6,23,7)
mean(list)
median(list)
mode(list)
list = c(1,5,6,23,5)
mean(list)
median(list)
mode(list)
min(list)
range(list)
ceiling(4.5)
cumsum(list)
cumprod(list)
cummax(list)
sample(0:1,10,replace=F)
sample(0:1,10,replace=T)
# Pie Chart
labels = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="pie_chart.png")
colours = rainbow(length(labels))
pie(percentages,labels,main="Pie chart",col=colours)
legend("topright",c("a","b","c","d"),cex=0.8) # cex scales text.
legend("topright",c("a","b","c","d"),cex=0.8, fill=colours) # cex scales text.
labels = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="pie_chart.png")
colours = rainbow(length(labels))
pie(percentages,labels,main="Pie chart",col=colours)
legend("topright",c("a","b","c","d"),cex=0.8, fill=colours) # cex scales text.
labels = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="pie_chart.png")
colours = rainbow(length(labels))
pie(percentages,labels,main="Pie chart",col=colours)
legend("topright",c("a","b","c","d"),cex=0.8, fill=colours) # cex scales text.
dev.off()
install.packages("plotrix")
library(plotrix)
png(file="3D_pie_chart.png")
colours = rainbow(length(labels))
pie3D(percentages,labels,main="Pie chart",col=colours)
legend("topright",c("a","b","c","d"),cex=0.8, fill=colours) # cex scales text.
dev.off()
library(plotrix)
labels1 = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="3D_pie_chart.png")
pie3D(percentages,labels=labels1,main="Pie chart",explode=0.1,start=pi/2,labelcex=0.8)
legend("topright",c("a","b","c","d"),cex=0.8, fill=colours) # cex scales text.
dev.off()
library(plotrix)
labels1 = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="3D_pie_chart.png")
pie3D(percentages,labels=labels1,main="Pie chart",explode=0.1,start=pi/2,labelcex=0.8)
dev.off()
labels1 = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="bar_chart.png")
colours = rainbow(length(labels))
barplot(percentages,names.arg=labels1,xlab="x",ylab="y",main="Pie chart"col=colours)
dev.off()
labels1 = c("a","b","c","d")
percentages = c(10,20,30,40)
png(file="bar_chart.png")
colours = rainbow(length(labels))
barplot(percentages,names.arg=labels1,xlab="x",ylab="y",main="Pie chart",col=colours)
dev.off()
install.packages("forecast")
install.packages("tseries")
install.packages("rugarch")
library(quantmod)
library(lattice)
library(timeSeries)
library(rugarch)
getSymbols("^GSPC", from="2005-01-01")
spReturns = diff(log(Cl(GSPC)))
spReturns[as.character(head(index(Cl(GSPC)),1))] = 0
windowLength = 500
foreLength = length(spReturns) - windowLength
forecasts <- vector(mode="character", length=foreLength)
setwd("/Users/patrickfahy99/Documents/Time Series Analysis R/")
spArimaGarch = as.xts(
read.zoo(
file="forecasts_new.csv", format="%Y-%m-%d", header=F, sep=","
)
)
spIntersect = merge( spArimaGarch[,1], spReturns, all=F )
spArimaGarchReturns = spIntersect[,1] * spIntersect[,2]
spArimaGarchCurve = log( cumprod( 1 + spArimaGarchReturns ) )
spBuyHoldCurve = log( cumprod( 1 + spIntersect[,2] ) )
spCombinedCurve = merge( spArimaGarchCurve, spBuyHoldCurve, all=F )
require(lattice)
xyplot(
spCombinedCurve,
superpose=T,
col=c("darkred", "darkblue"),
lwd=2,
key=list(
text=list(
c("ARIMA+GARCH", "Buy & Hold")
),
lines=list(
lwd=2, col=c("darkred", "darkblue")
)
)
)
library("quantmod")
library("tseries")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
getSymbols("UNG", from="2014-11-11", to="2017-01-01")
## Utilise the backwards-adjusted closing prices
aAdj = unclass(ARNC$ARNC.Adjusted)
bAdj = unclass(UNG$UNG.Adjusted)
## Plot the ETF backward-adjusted closing prices
plot(aAdj, type="l", xlim=c(0, length(aAdj)), ylim=c(0.0, 45.0),
xlab="November 11th 2014 to January 1st 2017",
ylab="Backward-Adjusted Prices in USD", col="blue")
par(new=T)
plot(bAdj, type="l", xlim=c(0, length(bAdj)), ylim=c(0.0, 45.0),
axes=F, xlab="", ylab="", col="red")
par(new=F)
## Plot a scatter graph of the ETF adjusted prices
plot(aAdj, bAdj, xlab="ARNC Backward-Adjusted Prices",
ylab="UNG Backward-Adjusted Prices")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
getSymbols("UNG", from="2014-11-11", to="2017-01-01")
## Utilise the backwards-adjusted closing prices
aAdj = unclass(ARNC$ARNC.Adjusted)
bAdj = unclass(UNG$UNG.Adjusted)
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
getSymbols("UNG", from="2014-11-11", to="2017-01-01")
library("quantmod")
library("tseries")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
getSymbols("UNG", from="2014-11-11", to="2017-01-01")
## Utilise the backwards-adjusted closing prices
aAdj = unclass(ARNC$ARNC.Adjusted)
bAdj = unclass(UNG$UNG.Adjusted)
## Plot the ETF backward-adjusted closing prices
plot(aAdj, type="l", xlim=c(0, length(aAdj)), ylim=c(0.0, 45.0),
xlab="November 11th 2014 to January 1st 2017",
ylab="Backward-Adjusted Prices in USD", col="blue")
par(new=T)
plot(bAdj, type="l", xlim=c(0, length(bAdj)), ylim=c(0.0, 45.0),
axes=F, xlab="", ylab="", col="red")
par(new=F)
## Plot a scatter graph of the ETF adjusted prices
plot(aAdj, bAdj, xlab="ARNC Backward-Adjusted Prices",
ylab="UNG Backward-Adjusted Prices")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
getSymbols("UNG", from="2014-11-11", to="2017-01-01")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
library("quantmod")
library("tseries")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
getSymbols("UNG", from="2014-11-11", to="2017-01-01")
library("quantmod")
library("tseries")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2015-11-11", to="2017-01-01")
## Obtain ARNC and UNG
getSymbols("ARNC", from="2014-11-11", to="2017-01-01")
